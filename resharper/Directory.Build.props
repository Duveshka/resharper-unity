<Project>
  <PropertyGroup>
    <!-- Use a per project obj folder in a common build folder. Each project needs its own obj folder, as this contains
         e.g. nuget import files and generated files, and can't be shared across all projects.
         Note that we must set it in Directory.Build.Props as Microsoft.Common.props (included by Microsoft.Net.Sdk)
         will set the property and immediately use it. Fortunately, it includes Directory.build.props first.
         Also make sure that obj folder is outside of the project folder, or the default wildcards will include it in
         the project
         See:
         * https://github.com/Microsoft/msbuild/issues/1603
         * https://github.com/dotnet/sdk/issues/803
         * https://github.com/dotnet/sdk/issues/802 -->
    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)\build\$(MSBuildProjectName)\obj\</BaseIntermediateOutputPath>

    <!-- Use a per-project bin folder, again outside of the project folder to avoid wildcard inclusion -->
    <OutputPath>$(MSBuildThisFileDirectory)\build\$(MSBuildProjectName)\bin\$(Configuration)</OutputPath>

    <!-- Define a single bin folder to contain the ReSharper plugins. This means we only get one copy of the SDK, and
         all plugin files and all tests are output to the same folder. This works even though it contains both Rider and
         VisualStudio plugin assemblies because we don't use this folder to run code. Rider uses the idea-sandbox gradle
         infrastructure and ReSharper requires a proper install/custom hive. This bin folder is only used for tests, and
         tests will only load assemblies that are directly referenced (e.g. a Rider test assembly wouldn't load a
         VisualStudio test assembly) and only starts components from zones that are activated by the TestEnvironment.
         We don't know which projects need the common bin folder, so we can only define it here and have to use it in
         each assembly directly.
         For reference, the standard SDK package entry points would mean that production code would skip copying
         @(JetContent) such as external annotations or schemas, would also skip copying all product assemblies defined
         in @(JetReference) and would set JetReferencesPrivate=False to avoid creating a private copy of reference
         assemblies in the bin dir. For test projects, JetTestProject=True, and @(JetContent) and @(JetReference) are
         always copied. -->
    <ReSharperUnityCommonOutputPath>$(MSBuildThisFileDirectory)\build\Unity\bin\$(Configuration)</ReSharperUnityCommonOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <Company>JetBrains</Company>
  </PropertyGroup>

  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)..\sign.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <!-- Set default constants to enable asserts and exceptions in debug mode -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;JET_MODE_ASSERT;JET_MODE_REPORT_EXCEPTIONS</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>TRACE</DefineConstants>
  </PropertyGroup>

  <!-- Do not try to auto-unify referenced assembly versions. The SDK has a couple of clashes that are not easily
       solved. E.g. the SDK has an exact reference on System.Runtime.CompilerServices.Unsafe.nupkg 4.5.3, which brings
       in System.Runtime.CompilerServices.dll 4.0.4.1. The Microsoft.CodeAnalysis.dll references 5.0.0, which can't be
       resolved as we're stuck on the 4.5.3 package.
       This will normally give a warning about an unresolved version conflict, as msbuild will try to generate binding
       redirects, but it doesn't appear to do anything else - the binding redirects might be calculated, but they're not
       output for a class library unless we set GenerateBindingRedirectsOutputType to true. In which case, we get a
       .dll.config file that contains the references that were auto-unified. If the reference has a conflict, it's not
       resolved, so doesn't get output.
       We don't actually care because we have no requirements for a specific version of a reference, and especially not
       for a reference that could introduce a conflict. We're just a plugin and want to compile against and load the
       versions of the assemblies used by the product. So we disable calculating binding redirects, and as a side
       effect, remove the big warnings. -->
  <PropertyGroup>
    <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
  </PropertyGroup>

  <Import Project="..\Packaging.props" />
  <Import Project="$(MSBuildThisFileDirectory)build\generated\DotNetSdkPath.generated.props"
          Condition="Exists('$(MSBuildThisFileDirectory)build\generated\DotNetSdkPath.generated.props')" />

  <!-- Running tests on a Mac requires PresentationCore/PresentationFramework, which isn't part of the standard Mono/netcore
       distro. We need to copy them from the SDK. Note that the IsOsPlatform function requires msbuild 15.3+
       Note that this works, even though JetTestProject is defined AFTER this file is imported, because properties and
       imports are evaluated before ItemGroups -->
  <ItemGroup Condition=" '$(JetTestProject)' == 'True' AND '$([MSBuild]::IsOsPlatform(OSX))' == 'True' ">
    <JetContent Include="$(DotNetSdkPath)\..\ReSharperHost\NetCore\runtimes\unix\lib\netcoreapp3.0\PresentationFramework.dll">
      <TargetPath>PresentationFramework.dll</TargetPath>
    </JetContent>
    <JetContent Include="$(DotNetSdkPath)\..\ReSharperHost\NetCore\runtimes\unix\lib\netcoreapp3.0\PresentationCore.dll">
      <TargetPath>PresentationCore.dll</TargetPath>
    </JetContent>
  </ItemGroup>
  <!-- This is untested -->
  <ItemGroup Condition=" '$(JetTestProject)' == 'True' AND '$([MSBuild]::IsOsPlatform(Linux))' == 'True' ">
    <JetContent Include="$(DotNetSdkPath)\..\ReSharperHost\NetCore\runtimes\unix\lib\netcoreapp3.0\PresentationFramework.dll">
      <TargetPath>PresentationFramework.dll</TargetPath>
    </JetContent>
    <JetContent Include="$(DotNetSdkPath)\..\ReSharperHost\NetCore\runtimes\unix\lib\netcoreapp3.0\PresentationCore.dll">
      <TargetPath>PresentationCore.dll</TargetPath>
    </JetContent>
  </ItemGroup>
</Project>
