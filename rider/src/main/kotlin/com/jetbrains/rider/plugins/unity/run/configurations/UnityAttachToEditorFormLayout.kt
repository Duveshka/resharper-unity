package com.jetbrains.rider.plugins.unity.run.configurations

import com.intellij.openapi.ui.panel.ComponentPanelBuilder
import com.intellij.uiDesigner.core.GridConstraints
import com.intellij.uiDesigner.core.GridLayoutManager
import com.intellij.uiDesigner.core.Spacer
import com.intellij.util.ui.JBUI
import com.jetbrains.rider.plugins.unity.UnityBundle
import java.awt.Dimension
import java.awt.Insets
import javax.swing.JComponent
import javax.swing.JLabel
import javax.swing.JPanel
import javax.swing.JTextField

open class UnityAttachToEditorFormLayout() {
    protected var rootPanel: JPanel? = null
    protected var commentLabel: JLabel? = null
    protected lateinit var editorInstanceJsonError: JLabel
    protected lateinit var processIdInfo: JLabel
    protected lateinit var editorInstanceJsonErrorPanel: JPanel
    protected lateinit var processesList: ProcessesPanel
    protected lateinit var editorInstanceJsonInfoPanel: JPanel
    protected lateinit var textField1: JTextField
    val panel: JPanel
        get() = (rootPanel)!!

    private fun createUIComponents() {
        commentLabel = ComponentPanelBuilder.createCommentComponent(
            UnityBundle.message("comment.label.text.editorinstance.json.file.required.to.automatically.configure.run.configuration"), true)
        commentLabel!!.border = JBUI.Borders.emptyLeft(18)
    }

    init {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        `$$$setupUI$$$`()
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private fun `$$$setupUI$$$`() {
        createUIComponents()
        rootPanel = JPanel()
        rootPanel!!.layout = GridLayoutManager(6, 1, Insets(0, 0, 0, 0), -1, -1)
        editorInstanceJsonErrorPanel = JPanel()
        editorInstanceJsonErrorPanel!!.layout = GridLayoutManager(3, 1, Insets(0, 0, 0, 0), -1, -1)
        rootPanel!!.add(editorInstanceJsonErrorPanel, GridConstraints(0, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                                      GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                                                                      GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                                                                      null, null, null, 0, false))
        editorInstanceJsonError = JLabel()
        editorInstanceJsonError!!.text = UnityBundle.message("editorinstance.error")
        editorInstanceJsonErrorPanel!!.add(editorInstanceJsonError,
                                           GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                           GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                           null, 0, false))
        editorInstanceJsonErrorPanel!!.add(commentLabel,
                                           GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                           GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                           null, 0, false))
        val spacer1 = Spacer()
        editorInstanceJsonErrorPanel!!.add(spacer1,
                                           GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                           GridConstraints.SIZEPOLICY_WANT_GROW, Dimension(-1, 25), Dimension(-1, 25),
                                                           Dimension(-1, 25), 1, false))
        processesList = ProcessesPanel()
        rootPanel!!.add(processesList, GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                       GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                                                       GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, null,
                                                       null, null, 0, false))
        editorInstanceJsonInfoPanel = JPanel()
        editorInstanceJsonInfoPanel!!.layout = GridLayoutManager(2, 1, Insets(0, 0, 0, 0), -1, -1)
        rootPanel!!.add(editorInstanceJsonInfoPanel, GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                                     GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                                                                     GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                                                                     null, null, null, 0, false))
        processIdInfo = JLabel()
        processIdInfo!!.text = UnityBundle.message("using.process")
        editorInstanceJsonInfoPanel!!.add(processIdInfo,
                                          GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                          GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                          null, 0, false))
        val spacer2 = Spacer()
        editorInstanceJsonInfoPanel!!.add(spacer2,
                                          GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                          GridConstraints.SIZEPOLICY_WANT_GROW, Dimension(-1, 25), Dimension(-1, 25),
                                                          Dimension(-1, 25), 0, false))
        textField1 = JTextField()
        textField1!!.isEnabled = false
        textField1!!.isVisible = false
        rootPanel!!.add(textField1, GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                                    Dimension(150, -1), null, 0, false))
    }

    /**
     * @noinspection ALL
     */
    fun `$$$getRootComponent$$$`(): JComponent? {
        return rootPanel
    }
}